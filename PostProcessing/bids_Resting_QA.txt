#!/usr/bin/env bash


while getopts "b:hj:" Option; do
 case $Option in
 h)
  show_help="1"
  ;;
 esac
 done

shift $((OPTIND-1))

if [[ "${show_help}" == "1" || "$#" -lt "2" ]]; then
 echo "Usage: ${0##*/} [OPTION]... <operation> <session>"
 echo "       ${0##*/} [OPTION]... <operation> only <session>"
 echo "Run Resting State steps on a session"
 echo
 echo "  -h             Show this help"
 echo
 echo "<operation> is one of the following:"
 echo " start, threshold03, threshold05, summarize, post, results"
 echo "Specifying a particular operation will run that step then attempt"
 echo "to start the next process.  To prevent the next process from starting,"
 echo "use the 'only' keyword."
 echo
 exit;
 fi


operation="${1}"
if [[ "${2}" == "only" ]]; then only="1"; shift;
 fi
session="${2%/}"
session="${session##*/}"
session="${session%%/*}"

scriptsdir=/analysis/HCP/BIDS/scripts_QA

gnpd="$(bids info $session grid,nifti,pipeline,dicom)"

# like 12345
grid="$(cut -d , -f 1 <<<"$gnpd")"

# like /data/BIDS/sub-12345/ses-23456
nifti="$(cut -d , -f 2 <<<"$gnpd")"

# like /analysis/HCP/BIDS/ses-23456
pipeline="$(cut -d , -f 3 <<<"$gnpd")"

# takes like /data/FE/23456 and extracts like FE
study="$(cut -d , -f 4 <<<"$gnpd" | cut -d / -f 3)"

# like /analysis/HCP/BIDS/ses-23456/QA
qadir="${pipeline}/QA"


function prepare_workspace {
 ### Step 0: bids permissions
 echo "Running «bids permissions ${session}»"
 echo -e "You need root/sudo (administrative) access to do this step.  If entering your password below doesn't grant you the necessary rights, then have your administrator change permissions of the pipeline files for ${session} then run:\n${0} threshold03 ${session}"
 bids permissions ${session}
 } # prepare_workspace
 


function do_threshold03 {
 ### Step 1: threshold 0.3

 if [[ -z "$pipeline" ]]; then
  echo "Error:  pipeline dir seems to be missing!  Exiting..."
  exit
 fi

 if [[ -d "$qadir" ]]; then
  echo "Error:  $qadir already exists!  Exiting..."
  exit
 fi 

 pushd "$(ls -d ${pipeline}/sub-*)"
 alltasks="$(ls -1d ses*rest*bold ses*Gambling*bold ses*MSIT*bold ses*oddball*bold ses*NbackFE* ses*nback* 2>/dev/null)"
 popd >/dev/null

 for taskstr in $alltasks; do
  echo -e "\n$session $grid $taskstr"
  mkdir -p "$scriptsdir/Logfiles/$session"
  logfile="$scriptsdir/Logfiles/$session/QA_${study}_${taskstr}.txt"

  echo "Calling QA script"
  echo "sh $scriptsdir/QA_HCP-BIDS_pipeline_Add_DVARS_chgRAWFILE3.sh $session $grid $taskstr 2>&1 | tee -a $logfile" | qsub -V -q long.q@adrian
 done

 echo "Now waiting for job to end (when the ## of pdf files equals the number of tasks)"

 task_count="$(tr ' ' '\n' <<<"$alltasks" | wc -l)"

 # might want to rewrite this so it's explicitly looking for a pdf in each task dir
 while [ 1 ]; do
  pdf_count="$(for taskstr in $alltasks; do ls -ld $qadir/${taskstr}/*.pdf 2>/dev/null; done | wc -l)"
  if [[ "$task_count" == "$pdf_count" ]]; then break; fi
  sleep 60
 done

 echo "Number of pdf files equals number of tasks (${task_count}),"
 echo "proceeding to test that each pdf file has 6 pages."
 sleep 10 # to take sure pdf files are done being written

 failure=""

 for taskstr in $alltasks; do 
  pdf="$(ls -1d $qadir/${taskstr}/*.pdf)"; 
  pagecount="$(pdftk $pdf dump_data | grep NumberOfPages | awk -F: '{print $2}' | sed 's/[^0-9]//g')"
  echo "${pdf##*/}: ${pagecount} pages"
  if [[ "$pagecount" != "6" ]]; then failure="yup"; fi
 done

 if [[ -n "$failure" ]]; then
  echo "Failed page count test on one or more pdf files.  This needs to be fixed before proceeding."
  exit
 fi
} # do_threshold03



function do_threshold05 {
 ### Step 2: threshold 0.5

 if [[ -z "$pipeline" ]]; then
  echo "Error:  pipeline dir seems to be missing!  Exiting..."
  exit
 fi

 if [[ ! -d "$qadir" ]]; then
  echo "Error:  $qadir missing!  Did you run «$0 threshold03 ${session}» first?  Exiting..."
  exit
 fi 

 pushd "$(ls -d ${pipeline}/sub-*)"
 alltasks="$(ls -1d ses*rest*bold ses*Gambling*bold ses*MSIT*bold ses*oddball*bold ses*NbackFE* ses*nback* 2>/dev/null)"
 popd >/dev/null

 pdf_count="$(for taskstr in $alltasks; do ls -ld $qadir/${taskstr}/*.pdf 2>/dev/null; done | wc -l)"
 if [[ "${pdf_count}" == "0" ]]; then 
  echo "Error:  I don't see the pdf files that «$0 threshold03 ${session}» should have created.  Exiting..."
  exit
 fi

 for taskstr in $alltasks; do
  echo -e "\n$session $grid $taskstr"
  mkdir -p "$scriptsdir/Logfiles/$session"
  logfile="$scriptsdir/Logfiles/$session/Rerun_FD_analysis_at_0.5_${taskstr}.txt"	

  echo "Calling QA script for FD-Thresh=0.5"
  echo "sh $scriptsdir/run_FD_analysis_at_Thresh_0.5.sh $session $grid $taskstr 2>&1 | tee -a $logfile" | qsub -V 
 done

 echo "Now waiting for job to end (when there're 5 FDthresh.0.5*.txt files in each taskdir)"

 task_count="$(tr ' ' '\n' <<<"$alltasks" | wc -l)"

 ## Check here to work out if jobs are done!
 while [ 1 ]; do
  fdcount="$(find "$qadir"/ -mindepth 1 -maxdepth 1 -type d | while read d; do echo "$(find ${d}/ -iname 'FDthresh.0.5*.txt' | wc -l)"; done | uniq)"
  echo "$(date "+%H:%M:%S"): $fdcount" >> "$qadir/fdcount.log" # test line, get rid of it soon
  if [[ "$fdcount" == "5" ]]; then break; fi
  sleep 60
 done

 sleep 10
# ls -1d $qadir/*/*0.5*
 for d in $qadir/*bold; do 
  echo; 
  (echo "${d##*/}:"; ls -1d ${d}/*0.5* | sed 's|^.*/||' ) | column
 done

 while [ 1 ]; do
  echo "Above should be a listing of the output files.  Do they look OK?  Type yes or no then hit ENTER:"
  read answer
  a="$(tr 'YN' 'yn' <<<"${answer:0:1}")"
  if [[ "$a" == "y" ]]; then 
   echo "Moving on, then!"
   break
  elif [[ "$a" == "n" ]]; then
   echo "Stopping workflow!"
   echo "Run «$0 threshold05 $session» to retry this step"
   echo "Run <<$0 summarize $session» for the next step"
   exit
  fi
 done
} # do_threshold05



function do_summarize {
 ### Step 3: Summarize
 log="${scriptsdir}/Summaries_ALL/Summary_QA_ALL-forREDCap-AM-NEW.txt"

 pushd "$(ls -d ${pipeline}/sub-*)" >/dev/null
 rtasks="$(ls -1d ses*rest*bold 2>/dev/null)"
 popd >/dev/null

 echo >> "${log}"

 totalminsleft="0"

 csv="${qadir}/MRIDashboard_RestingQA_${session}.csv"
 echo "session_number,completed_successfully,fd_threshold_0_3,other_value,meanfd_ap,minsleft_ap,meandvarspost_ap,meanfd_pa,minsleft_pa,meandvarspost_pa,resting_qa_complete" > "${csv}"
 echo -n "${session},1,1,0.5" >> "${csv}"

 for taskstr in $rtasks; do

  cd $qadir/$taskstr

  scantype=$(echo $taskstr | awk -F"-" '{print $3}' | awk -F"_" '{print $1}')
  encdir=$(echo $taskstr | awk -F"-" '{print $4}' | awk -F"_" '{print $1}')
  runnum=$(echo $taskstr | awk -F"-" '{print $5}' | awk -F"_" '{print $1}')
  scanname=$(echo "${scantype}_${encdir}_${runnum}")

  MeanFD03="$(cut -c 1-5 <FDthresh.0.3_Mean_fd_postScrub.txt)"
  MaxFD03="$(cut -c 1-5 <FDthresh.0.3_Max_fd.txt)"
  MeanDvarsPost="$(cut -c 1-5 <DVARS-Avgd_ICACleaned_Nichols_col2_Unscaled.txt)"
  MinsAfter03="$(cut -c 1-3 <FDthresh.0.3_ScanTime_inMins_afterScrubbing.txt)"

  totalminsleft="$(echo "scale=3; $totalminsleft + $MinsAfter03" | bc)"

  echo -n ",${MeanFD03},${MinsAfter03},${MeanDvarsPost}" >> "${csv}"

  echo "Values to enter for $taskstr of session $session:"
  echo "MeanFD: ${MeanFD03}"
  echo "MinsLeft: ${MinsAfter03}"
  echo "MeanDvarsPost: ${MeanDvarsPost}"
  echo

  echo -en "${session},${scanname},${MeanFD03},${MinsAfter03},${MeanDvarsPost}\n" >> "${log}";
 done	# iterating through tasks

 echo ",2" >> "${csv}"

 totalminsleft="${totalminsleft%.*}" # floor variable into an integer
 echo "Total mins left: $totalminsleft"
 if [[ "${totalminsleft}" < "10" ]]; then
  echo "That's too low!  Mark Post-processing as failed."
 else
  echo "Seems fine.  Don't set Post-processing yet."
 fi

 echo "Enter values into Redcap's Resting QA instrument for session ${session}"
 echo "or upload the file at '$csv', then hit Enter to continue"
 echo "(Results also sent to file $log)"
 read answer

} # do_summarize



function do_zcorr {
 zcorrdir="${restdir}/CorrMaps/Scrubbed_FD-${1}"
 mkdir -p $zcorrdir/HIDE_NIIGZ
 for zcorr in $(ls $zcorrdir/zcorrmap* 2>/dev/null); do 
  echo "$(date "+%Y-%m-%d %H:%M:%S"), $zcorr"
  LD_LIBRARY_PATH="/misc/Libraries/libcrypt" mri_convert $zcorr ${zcorr}.gz &>> $logfile
 done
 mv $zcorrdir/*.gz $zcorrdir/HIDE_NIIGZ
}

function do_post {

 echo ""

 if [[ -z "$pipeline" ]]; then
  echo "I don't see a pipeline dir!  Exiting..."
  exit
 fi

 if [[ ! -e "/usr/local/fsl414/bin/film_gls" ]]; then
  echo "/usr/local/fsl414/bin/film_gls file is missing, possibly moved by administrator!  Exiting..."
  exit
 fi

 if [[ -z "$(which mri_convert 2>/dev/null)" ]]; then
  echo "Can't find mri_convert, system paths may not be correctly set!  Exiting..."
  exit
 fi

 scripts=/analysis/HCP/BIDS/scripts_PostProcessing_after_HCPpipe/Ashley
 scrubscripts="/analysis/HCP/BIDS/scripts_PostProcessing_after_HCPpipe/scripts_Scrubbing"
 restdir="$pipeline/Resting"

 mkdir -p ${restdir}/PostProc
 mkdir -p ${restdir}/CorrMaps/{Scrubbed_FD-0.3,Scrubbed_FD-0.5,Unscrubbed}

 logfile="${scripts}/Logfiles/${session}_run_PostProc_and_Corrmaps.txt"
 echo "$(date "+%Y-%m-%d %H:%M:%S"), Running 1b_AM_Unscrubbed_Resting_GSRnoGSR_PostProc_CorrMaps_CFold.R"
 Rscript "${scripts}/1b_AM_Unscrubbed_Resting_GSRnoGSR_PostProc_CorrMaps_CFold.R" $session "Unscrubbed" &>> $logfile

 logfile="${scripts}/Logfiles/${session}_run_PostProc_and_Corrmaps_NoGSR.txt"

 echo "$(date "+%Y-%m-%d %H:%M:%S"), Running 4b_Post_processing_after_ICA_FIX_NoGSR_CallFromBASH.R"
 Rscript "${scripts}/4b_Post_processing_after_ICA_FIX_NoGSR_CallFromBASH.R" $session "Unscrubbed" &>> $logfile

 echo "$(date "+%Y-%m-%d %H:%M:%S"), Running 5b_create_scrubbed_files_G-NG_AP-PA.sh $session 0.3"
 ${scrubscripts}/5b_create_scrubbed_files_G-NG_AP-PA.sh $session 0.3 &>> $logfile

 echo "$(date "+%Y-%m-%d %H:%M:%S"), Running 5b_create_scrubbed_files_G-NG_AP-PA.sh $session 0.5"
 ${scrubscripts}/5b_create_scrubbed_files_G-NG_AP-PA.sh $session 0.5 &>> $logfile

 echo "$(date "+%Y-%m-%d %H:%M:%S"), Running 6b_create_scrubbed_files_G-NG_AP-PA_CorrMapsOnly.sh $session 0.3"
 ${scrubscripts}/6b_create_scrubbed_files_G-NG_AP-PA_CorrMapsOnly.sh $session 0.3 &>> $logfile

 echo "$(date "+%Y-%m-%d %H:%M:%S"), Running 6b_create_scrubbed_files_G-NG_AP-PA_CorrMapsOnly.sh $session 0.5"
 ${scrubscripts}/6b_create_scrubbed_files_G-NG_AP-PA_CorrMapsOnly.sh $session 0.5 &>> $logfile

 do_zcorr 0.3

 do_zcorr 0.5

} # do_post

function do_results {
 restdir="$pipeline/Resting"
 hidefiles="$(ls -1 ${restdir}/CorrMaps/Scrubbed*/HIDE_NIIGZ/* | sed 's/^.*\///')"
 echo $hidefiles | tr ' ' '\n'
 echo "(There are $(wc -l <<<"$hidefiles") files in ${restdir}/CorrMaps/Scrubbed*/HIDE_NIIGZ)"
 }




function next_operation {
 next="$1"
 if [[ -n "$only" ]]; then
  echo "Stopping here.  Run '${0} $next $session' at any time to resume"
 else
  ${0} $next $session
  fi
}

##########################
### Start of main code ###
##########################

echo "Resting QA Step:  ${operation}"

case "${operation}" in
 "start" )
  prepare_workspace
  next_operation "threshold03"
  ;;
  
 "threshold03" )
  do_threshold03
  next_operation "threshold05"
  ;;
  
 "threshold05" )
  do_threshold05
  next_operation "summarize"
  ;;
  
 "summarize" )
  do_summarize
  next_operation "post"
  ;;

 "post" )
  do_post
  next_operation "results"
  ;;

 "results" )
  do_results
  ;;

 *)
  echo "Operation must be one of the following:"
  echo "start, threshold03, threshold05, summarize, post, results"
  ;;
 esac





